// <auto-generated />
using System;
using BagStore.Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BagStore.Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250811120246_SeedProducts")]
    partial class SeedProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BagStore.Backend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(MAX) COLLATE Cyrillic_General_CI_AS");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(MAX) COLLATE Cyrillic_General_CI_AS");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(MAX) COLLATE Cyrillic_General_CI_AS");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(MAX) COLLATE Cyrillic_General_CI_AS");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Status");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BagStore.Backend.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BagStore.Backend.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(MAX) COLLATE Cyrillic_General_CI_AS");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(MAX) COLLATE Cyrillic_General_CI_AS");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(MAX) COLLATE Cyrillic_General_CI_AS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(MAX) COLLATE Cyrillic_General_CI_AS");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(MAX) COLLATE Cyrillic_General_CI_AS");

                    b.HasKey("Id");

                    b.HasIndex("Material");

                    b.HasIndex("Size");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Просторная сумка из высококачественной натуральной кожи. Идеальный выбор для деловых встреч и повседневного использования.",
                            ImageUrl = "/images/bag1.jpg",
                            Material = "natural",
                            Name = "Элегантная сумка из натуральной кожи",
                            Price = 3200.0m,
                            Size = "large"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Стильная маленькая сумка из экологичной искусственной кожи. Легкая и удобная для ежедневного ношения.",
                            ImageUrl = "/images/bag2.jpg",
                            Material = "artificial",
                            Name = "Компактная сумка из искусственной кожи",
                            Price = 3400.0m,
                            Size = "small"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Премиум сумка из натуральной кожи.",
                            ImageUrl = "/images/bag3.jpg",
                            Material = "natural",
                            Name = "Деловая сумка премиум класса",
                            Price = 3600.0m,
                            Size = "large"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Элегантная вечерняя сумка для особых случаев. Вмещает все необходимое для вечеринки или свидания.",
                            ImageUrl = "/images/bag4.jpg",
                            Material = "artificial",
                            Name = "Миниатюрная вечерняя сумка",
                            Price = 3800.0m,
                            Size = "small"
                        });
                });

            modelBuilder.Entity("BagStore.Backend.Models.OrderItem", b =>
                {
                    b.HasOne("BagStore.Backend.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BagStore.Backend.Models.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
